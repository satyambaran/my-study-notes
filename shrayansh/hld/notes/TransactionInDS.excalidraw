/*
    Transaction: 
        Set of operations which needs to performed against the DB

        It has 4 properties ACID:
        Atomicity:  All operations in a single trxns should be success or all should fail.
        Consistency:DB should be in consistent state before and after the trxn
        Isolation:  More than one trxn can occur concurrently
        Durability: Trxn once committed, should persist


        begin
            deduct 100 from a
            send 100 to b
            if all success:
                commit
            else
                rollback
        end

    How to handle it in Distributed system, where operations involves multiple DB?
        Transaction is local to a particular DB

        It wont work, because two different DB
        begin
            update order DB
            update inventory DB
            if all success
                commit
            else
                rollback
        end

    Three ways:
    1. 2 Phase commit: (very popular)
        1st phase: Voting/Prepare phase
        2nd phase: Decision/Commit phase
    2. 3 Phase commit: (not used much because of complexity)
    3. SAGA pattern:   (used very much)

*/
